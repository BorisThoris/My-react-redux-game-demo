{"version":3,"sources":["components/mysteryCard/cardFront.png","components/mysteryCard/cardBack.png","components/mysteryCard/cardBack2.png","components/game/gameBoardBackground.jpg","components/mysteryCard/Card.js","gameRedux/actionTypes.js","components/gameOver/index.js","components/informationDiv/index.js","components/replayButton/index.js","components/game/Game.js","App.js","serviceWorker.js","gameRedux/reducer.js","index.js"],"names":["module","exports","__webpack_require__","p","Card","_this$props","this","props","onTest","saveStyle","onClick","id","_this","_this$props2","classToAdd","disabled","intro","cardStyle","display","opacity","transition","transform","tempClass","react_default","a","createElement","clickHandler","className","concat","style","class","height","width","src","cardBack2","alt","cardBack","value","position","top","right","cardFront","Component","connect","state","propss","cardsPressed","dispatch","elementStyle","type","flipCard","card","gameOver","gameIsOver","score","zIndex","cards","htmlSaved","cardStyles","cardsHtml","activeCard","tempCurrentCard","cardTwo","lastCard","lives","flippedCards","setIntro","bool","saveCards","cardArray","saveCardsHtml","elementArray","setLives","unFlipCards","InformationDiv","ReplayButton","window","alert","Game","includes","vals","i","cardCount","push","number","count","key","length","Math","floor","random","setTimeout","_this$props3","styleArray","cardDisabled","components_mysteryCard_Card","index","components_informationDiv","components_gameOver","components_replayButton","backgroundImage","bgnImage","App","game_Game","Boolean","location","hostname","match","initialState","pages","currentPage","active","matched","pageReducer","currentCard","arguments","undefined","action","pageName","newPages","Object","objectSpread","tempintro","tempLastCard","tempLives","tempScore","tempGameOver","tempFlippedCards","tempArr","newCards","newCardsHtml","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","splice","err","return","matchBool","backgroundColor","test","store","createStore","reducer","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.81a53ed2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cardFront.34e9638c.png\";","module.exports = __webpack_public_path__ + \"static/media/cardBack.e237d232.png\";","module.exports = __webpack_public_path__ + \"static/media/cardBack2.0c66ed35.png\";","module.exports = __webpack_public_path__ + \"static/media/gameBoardBackground.2873992a.jpg\";","import React, { Component } from \"react\";\r\nimport * as actionTypes from \"../../gameRedux/actionTypes\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./Card.css\";\r\nimport cardFront from \"./cardFront.png\";\r\nimport cardBack from \"./cardBack.png\";\r\nimport cardBack2 from \"./cardBack2.png\";\r\n\r\nclass Card extends Component {\r\n  componentDidMount() {\r\n    const { onTest, saveStyle } = this.props;\r\n\r\n    onTest();\r\n    saveStyle();\r\n    // console.log(this.props.id);\r\n  }\r\n\r\n  clickHandler() {\r\n    this.props.onClick(this.props.id);\r\n  }\r\n\r\n  render() {\r\n    const { classToAdd, disabled, intro } = this.props;\r\n\r\n    let cardStyle = {\r\n      display: \"inline-block\"\r\n    };\r\n\r\n    if (disabled) {\r\n      cardStyle = {\r\n        display: \"inline-block\",\r\n        opacity: \"0.4\",\r\n        transition: \"1s\",\r\n        transform: \"scale(0.9)\"\r\n      };\r\n    }\r\n\r\n    let tempClass = null;\r\n\r\n    if (classToAdd) {\r\n      tempClass = classToAdd;\r\n    } else if (intro) {\r\n      tempClass = \"active\";\r\n    }\r\n\r\n    return (\r\n      <div\r\n        onClick={() => {\r\n          this.clickHandler();\r\n        }}\r\n        className={`flip-card ${tempClass}`}\r\n        style={cardStyle}\r\n      >\r\n        <div class=\"flip-card-inner\">\r\n          {/* <h4 class=\"flip-card-number\">{this.props.value}</h4> */}\r\n          <div class=\"flip-card-front\">\r\n            <img\r\n              height={\"99%\"} //90\r\n              width={\"95%\"} //95\r\n              src={`${cardBack2}`}\r\n              alt={cardBack}\r\n            />\r\n          </div>\r\n          <div class=\"flip-card-back\">\r\n            {/* <h4 style={this.props.style}>{this.props.value}</h4> */}\r\n            <h4 class=\"flip-card-number\">{this.props.value}</h4>\r\n            <img\r\n              style={{ position: \"relative\", top: \"0px\", right: \"0px\" }}\r\n              height={\"100%\"}\r\n              width={\"100%\"}\r\n              src={`${cardFront}`}\r\n              alt={\"lol\"}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    propss: state,\r\n    cardsPressed: state.cardsPressed,\r\n    intro: state.intro\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    saveStyle: elementStyle => ({\r\n      type: actionTypes.SAVE_CARD_STYLE,\r\n      elementStyle\r\n    }),\r\n    onTest: () => dispatch({ type: actionTypes.ON_TEST }),\r\n    flipCard: card => {\r\n      dispatch({ type: actionTypes.ON_CARD_FLIP, card });\r\n    }\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Card);\r\n","export const ON_LEFT = \"ON_LEFT\";\r\nexport const ON_RIGHT = \"ON_RIGHT\";\r\nexport const ON_UP = \"ON_UP\";\r\nexport const ON_DOWN = \"ON_DOWN\";\r\n\r\nexport const SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\";\r\nexport const SET_ACTIVE = \"SET_ACTIVE\";\r\nexport const SET_LAST_SLIDER_CHILD = \"SET_LAST_SLIDER_CHILD\";\r\nexport const REGISTER_CONTROL = \"REGISTER_CONTROL\";\r\nexport const UPDATE_CONTROL = \"UPDATE_CONTROL\";\r\n\r\nexport const ON_TEST = \"ON_TEST\";\r\nexport const SAVE_ALL_CARDS = \"SAVE_ALL_CARDS\";\r\nexport const SAVE_ALL_CARDS_HTML = \"SAVE_ALL_CARDS_HTML\";\r\nexport const ON_CARD_FLIP = \"ON_CARD_FLIP\";\r\nexport const SAVE_CARD_STYLE = \"SAVE_CARD_STYLE\";\r\n\r\nexport const SET_GAME_INTRO = \"ON_GAME_INTRO\";\r\nexport const SET_GAME_SCORE = \"SET_GAME_SCORE\";\r\nexport const SET_GAME_LIVES = \"SET_GAME_LIVES\";\r\n\r\nexport const UNFLIP_OLD_CARDS = \"UNFLIP_OLD_CARDS\";\r\n","import React, { Component } from \"react\";\r\nimport * as actionTypes from \"../../gameRedux/actionTypes\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass gameOver extends Component {\r\n  componentDidUpdate() {}\r\n\r\n  render() {\r\n    let { gameIsOver, score } = this.props;\r\n\r\n    return (\r\n      <div\r\n        id=\"gameOver\"\r\n        style={{\r\n          transition: \"0.15s\",\r\n          opacity: `${gameIsOver ? 100 : 0}`,\r\n          zIndex: `${gameIsOver ? 2 : -1000}`\r\n        }}\r\n      >\r\n        <div>Game Over!</div>\r\n        <div>\r\n          You scored\r\n          {` ${score}`} Points!\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    cards: state.cards,\r\n    htmlSaved: state.htmlSaved,\r\n    cardStyles: state.cardsHtml,\r\n    activeCard: state.tempCurrentCard,\r\n    cardTwo: state.cardTwo,\r\n    disabled: state.disabled,\r\n    lastCard: state.lastCard,\r\n    lives: state.lives,\r\n    score: state.score,\r\n    gameIsOver: state.gameOver,\r\n    flippedCards: state.flippedCards,\r\n    cardsPressed: state.cardsPressed\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    setIntro: bool => dispatch({ type: actionTypes.SET_GAME_INTRO, bool }),\r\n    onTest: () => dispatch({ type: actionTypes.ON_TEST }),\r\n    saveCards: cardArray => {\r\n      dispatch({ type: actionTypes.SAVE_ALL_CARDS, cardArray });\r\n    },\r\n    saveCardsHtml: elementArray => {\r\n      dispatch({ type: actionTypes.SAVE_ALL_CARDS_HTML, elementArray });\r\n    },\r\n    flipCard: card => {\r\n      dispatch({ type: actionTypes.ON_CARD_FLIP, card });\r\n    },\r\n    setLives: lives => {\r\n      dispatch({ type: actionTypes.SET_GAME_LIVES, lives });\r\n    },\r\n    unFlipCards: cards => {\r\n      dispatch({ type: actionTypes.UNFLIP_OLD_CARDS, cards });\r\n    }\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(gameOver);\r\n","import React, { Component } from \"react\";\r\nimport * as actionTypes from \"../../gameRedux/actionTypes\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./index.css\";\r\n\r\nclass InformationDiv extends Component {\r\n  render() {\r\n    const { gameIsOver, score, lives } = this.props;\r\n\r\n    return (\r\n      <div\r\n        id=\"informationDiv\"\r\n        style={{\r\n          transition: \"0.5s\",\r\n          opacity: `${gameIsOver ? 0 : 100}`\r\n        }}\r\n      >\r\n        <h4 id=\"scoreDiv\">Your score: {score}</h4>\r\n        <h4 id=\"livesDiv\">Your lives: {lives}</h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    cards: state.cards,\r\n    htmlSaved: state.htmlSaved,\r\n    cardStyles: state.cardsHtml,\r\n    activeCard: state.tempCurrentCard,\r\n    cardTwo: state.cardTwo,\r\n    disabled: state.disabled,\r\n    lastCard: state.lastCard,\r\n    lives: state.lives,\r\n    score: state.score,\r\n    gameIsOver: state.gameOver,\r\n    flippedCards: state.flippedCards,\r\n    cardsPressed: state.cardsPressed\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    setIntro: bool => dispatch({ type: actionTypes.SET_GAME_INTRO, bool }),\r\n    onTest: () => dispatch({ type: actionTypes.ON_TEST }),\r\n    saveCards: cardArray => {\r\n      dispatch({ type: actionTypes.SAVE_ALL_CARDS, cardArray });\r\n    },\r\n    saveCardsHtml: elementArray => {\r\n      dispatch({ type: actionTypes.SAVE_ALL_CARDS_HTML, elementArray });\r\n    },\r\n    flipCard: card => {\r\n      dispatch({ type: actionTypes.ON_CARD_FLIP, card });\r\n    },\r\n    setLives: lives => {\r\n      dispatch({ type: actionTypes.SET_GAME_LIVES, lives });\r\n    },\r\n    unFlipCards: cards => {\r\n      dispatch({ type: actionTypes.UNFLIP_OLD_CARDS, cards });\r\n    }\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(InformationDiv);\r\n","import React, { Component } from \"react\";\r\nimport * as actionTypes from \"../../gameRedux/actionTypes\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./index.css\";\r\n\r\nclass ReplayButton extends Component {\r\n  clickHandler() {\r\n    window.alert(\"lol\");\r\n  }\r\n\r\n  render() {\r\n    const { gameIsOver } = this.props;\r\n    return (\r\n      <div\r\n        id=\"replayButton\"\r\n        style={{\r\n          opacity: `${gameIsOver ? 100 : 0}`,\r\n          zIndex: `${gameIsOver ? 2 : -1000}`\r\n        }}\r\n      >\r\n        <div onClick={this.clickHandler} id=\"arrow\">\r\n          >\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    cards: state.cards,\r\n    htmlSaved: state.htmlSaved,\r\n    cardStyles: state.cardsHtml,\r\n    activeCard: state.tempCurrentCard,\r\n    cardTwo: state.cardTwo,\r\n    disabled: state.disabled,\r\n    lastCard: state.lastCard,\r\n    lives: state.lives,\r\n    score: state.score,\r\n    gameIsOver: state.gameOver,\r\n    flippedCards: state.flippedCards,\r\n    cardsPressed: state.cardsPressed\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    setIntro: bool => dispatch({ type: actionTypes.SET_GAME_INTRO, bool }),\r\n    onTest: () => dispatch({ type: actionTypes.ON_TEST }),\r\n    saveCards: cardArray => {\r\n      dispatch({ type: actionTypes.SAVE_ALL_CARDS, cardArray });\r\n    },\r\n    saveCardsHtml: elementArray => {\r\n      dispatch({ type: actionTypes.SAVE_ALL_CARDS_HTML, elementArray });\r\n    },\r\n    flipCard: card => {\r\n      dispatch({ type: actionTypes.ON_CARD_FLIP, card });\r\n    },\r\n    setLives: lives => {\r\n      dispatch({ type: actionTypes.SET_GAME_LIVES, lives });\r\n    },\r\n    unFlipCards: cards => {\r\n      dispatch({ type: actionTypes.UNFLIP_OLD_CARDS, cards });\r\n    }\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ReplayButton);\r\n","import React, { Component } from \"react\";\r\nimport * as actionTypes from \"../../gameRedux/actionTypes\";\r\nimport { connect } from \"react-redux\";\r\nimport Card from \"../mysteryCard/Card\";\r\nimport GameOver from \"../gameOver\";\r\nimport InformationDiv from \"../informationDiv\";\r\nimport ReplayButton from \"../replayButton\";\r\n\r\nimport \"./game.css\";\r\nimport bgnImage from \"./gameBoardBackground.jpg\";\r\n// import { url } from \"inspector\";\r\n// import cards from \"../mysteryCard/Card\";\r\n\r\nclass Game extends Component {\r\n  componentDidMount() {\r\n    const { saveCards, setIntro } = this.props;\r\n\r\n    let cardCount = 12;\r\n\r\n    let valuesCount = cardCount / 2;\r\n    let vals = [];\r\n\r\n    for (let i = 0; i < valuesCount; i++) {\r\n      vals.push({ number: i, count: 0 });\r\n    }\r\n\r\n    let cards = [];\r\n    for (let i = 0; i < cardCount; i++) {\r\n      cards.push({ key: i, id: i, value: \"empty\" });\r\n    }\r\n\r\n    for (let i = 0; i < vals.length; i++) {\r\n      while (vals[i].count < 2) {\r\n        let card = cards[Math.floor(Math.random() * cards.length)];\r\n\r\n        if (card.value === \"empty\") {\r\n          card.value = vals[i].number;\r\n          vals[i].count++;\r\n        }\r\n      }\r\n    }\r\n\r\n    setIntro(true);\r\n    setTimeout(() => {\r\n      setIntro(false);\r\n    }, 325);\r\n    saveCards(cards);\r\n  }\r\n\r\n  onClick = id => {\r\n    const { flipCard, cards, disabled, gameIsOver } = this.props;\r\n\r\n    if (!disabled.includes(cards[id]) && !gameIsOver) {\r\n      flipCard(id);\r\n    }\r\n    // console.log((e.target.childNodes[0].style.display = \"inline-block\"));\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      cards,\r\n      saveCardsHtml,\r\n      htmlSaved,\r\n      cardStyles,\r\n      activeCard,\r\n      disabled,\r\n      lastCard,\r\n      setLives,\r\n      lives,\r\n      flippedCards,\r\n      unFlipCards,\r\n      cardsPressed\r\n    } = this.props;\r\n\r\n    let cardArray = [];\r\n    let styleArray = [];\r\n\r\n    let bool = false;\r\n    let cardDisabled = false;\r\n\r\n    if (lives === null && cards.length > 0) {\r\n      setLives(cards.length / 2);\r\n    }\r\n\r\n    for (let i = 0; i < cards.length; i++) {\r\n      if (i === activeCard || i === lastCard) {\r\n        if (\r\n          flippedCards.includes(activeCard) ||\r\n          flippedCards.includes(lastCard)\r\n        ) {\r\n          bool = true;\r\n        }\r\n      }\r\n\r\n      if (disabled.includes(cards[i])) {\r\n        bool = true;\r\n        cardDisabled = true;\r\n      }\r\n\r\n      cardArray.push(\r\n        <Card\r\n          id={cards[i].id}\r\n          key={cards[i].key}\r\n          value={cards[i].value}\r\n          onClick={this.onClick}\r\n          style={cardStyles[i] ? cardStyles[i].style : null}\r\n          classToAdd={!disabled || bool ? \"active\" : null}\r\n          disabled={cardDisabled}\r\n        />\r\n      );\r\n\r\n      bool = false;\r\n      styleArray.push({ index: cards[i].id, style: {} });\r\n\r\n      cardDisabled = false;\r\n    }\r\n\r\n    if (activeCard && lastCard && cardsPressed === 2) {\r\n      // window.alert(\"hey\");\r\n      setTimeout(() => {\r\n        let cardsToFlip = [activeCard, lastCard];\r\n        unFlipCards(cardsToFlip);\r\n      }, 700);\r\n    }\r\n\r\n    if (!htmlSaved && styleArray.length > 0) saveCardsHtml(styleArray);\r\n\r\n    // TO BE MADE INTO COMPONENTS\r\n\r\n    return (\r\n      <div id=\"appDiv\">\r\n        <InformationDiv />\r\n        <GameOver />\r\n        <ReplayButton />\r\n        <div id=\"gameBoard\" style={{ backgroundImage: `url(${bgnImage})` }}>\r\n          <div id=\"cardsDiv\">{cardArray ? cardArray : null}</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    cards: state.cards,\r\n    htmlSaved: state.htmlSaved,\r\n    cardStyles: state.cardsHtml,\r\n    activeCard: state.tempCurrentCard,\r\n    cardTwo: state.cardTwo,\r\n    disabled: state.disabled,\r\n    lastCard: state.lastCard,\r\n    lives: state.lives,\r\n    score: state.score,\r\n    gameIsOver: state.gameOver,\r\n    flippedCards: state.flippedCards,\r\n    cardsPressed: state.cardsPressed\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    setIntro: bool => dispatch({ type: actionTypes.SET_GAME_INTRO, bool }),\r\n    onTest: () => dispatch({ type: actionTypes.ON_TEST }),\r\n    saveCards: cardArray => {\r\n      dispatch({ type: actionTypes.SAVE_ALL_CARDS, cardArray });\r\n    },\r\n    saveCardsHtml: elementArray => {\r\n      dispatch({ type: actionTypes.SAVE_ALL_CARDS_HTML, elementArray });\r\n    },\r\n    flipCard: card => {\r\n      dispatch({ type: actionTypes.ON_CARD_FLIP, card });\r\n    },\r\n    setLives: lives => {\r\n      dispatch({ type: actionTypes.SET_GAME_LIVES, lives });\r\n    },\r\n    unFlipCards: cards => {\r\n      dispatch({ type: actionTypes.UNFLIP_OLD_CARDS, cards });\r\n    }\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Game);\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Game from './components/game/Game';\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Game />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import * as actionTypes from \"./actionTypes\";\r\n\r\nconst initialState = {\r\n  cardsPressed: 0,\r\n  score: 0,\r\n  lives: null,\r\n\r\n  pages: {},\r\n  cardsHtml: [],\r\n  cards: [],\r\n  disabled: [],\r\n\r\n  currentPage: null,\r\n  active: null,\r\n  tempCurrentCard: null,\r\n  lastCard: null,\r\n\r\n  htmlSaved: false,\r\n  matched: false,\r\n  intro: false,\r\n  gameOver: false,\r\n  flippedCards: []\r\n};\r\n\r\nconst pageReducer = (state = initialState, action) => {\r\n  const pageName = action.pageName ? action.pageName : state.currentPage;\r\n  const newPages = { ...state.pages };\r\n\r\n  let cardsPressed = state.cardsPressed;\r\n  let currentCard;\r\n  //let tempCurrentCard = state.cardTwo;\r\n\r\n  let matched = state.matched;\r\n  let htmlSaved = state.htmlSaved;\r\n  let tempintro = state.intro;\r\n  let tempLastCard = state.lastCard;\r\n  let tempLives = state.lives;\r\n  let tempScore = state.score;\r\n  let tempGameOver = state.gameOver;\r\n  let tempFlippedCards = state.flippedCards;\r\n\r\n  let tempArr = [];\r\n  for (let i = 0; i < state.cards.length; i++) {\r\n    tempArr.push(state.cards[i]);\r\n  }\r\n\r\n  let newCards = tempArr;\r\n  let newCardsHtml = state.cardsHtml;\r\n\r\n  switch (action.type) {\r\n    /* important */\r\n\r\n    case actionTypes.SET_GAME_INTRO:\r\n      // let bool = action.bool;\r\n      tempintro = action.bool;\r\n\r\n      break;\r\n\r\n    case actionTypes.SET_GAME_LIVES:\r\n      // let bool = action.bool;\r\n      tempLives = action.lives;\r\n\r\n      break;\r\n\r\n    case actionTypes.SAVE_CARD_STYLE:\r\n      break;\r\n\r\n    case actionTypes.SAVE_ALL_CARDS:\r\n      newCards = action.cardArray;\r\n      break;\r\n\r\n    case actionTypes.SAVE_ALL_CARDS_HTML:\r\n      newCardsHtml = action.elementArray;\r\n      htmlSaved = true;\r\n      break;\r\n\r\n    case actionTypes.UNFLIP_OLD_CARDS:\r\n      for (let card of action.cards) {\r\n        for (let index in tempFlippedCards) {\r\n          if (card === tempFlippedCards[index]) {\r\n            tempFlippedCards = tempFlippedCards.splice(index - 1, 1);\r\n          }\r\n        }\r\n      }\r\n\r\n      cardsPressed = 0;\r\n      tempLastCard = null;\r\n      currentCard = null;\r\n\r\n      break;\r\n\r\n    case actionTypes.ON_CARD_FLIP:\r\n      let tempCurrentCard = state.tempCurrentCard;\r\n      let cards = state.cards;\r\n      let disabled = state.disabled;\r\n\r\n      const matchBool =\r\n        cards[action.card] &&\r\n        cards[tempCurrentCard] &&\r\n        cards[action.card].value === cards[tempCurrentCard].value &&\r\n        cards[action.card] !== cards[tempCurrentCard];\r\n\r\n      if (newCardsHtml[action.card]) {\r\n        newCardsHtml[action.card].style = { backgroundColor: \"red\" };\r\n      }\r\n\r\n      matched = false;\r\n\r\n      if (cardsPressed < 2) {\r\n        cardsPressed++;\r\n\r\n        currentCard = action.card;\r\n        tempLastCard = state.tempCurrentCard;\r\n        tempFlippedCards.push(currentCard);\r\n      }\r\n\r\n      if (cardsPressed === 2) {\r\n        if (matchBool) {\r\n          matched = true;\r\n          tempScore += 50;\r\n          tempLives++;\r\n\r\n          cardsPressed = 0;\r\n          disabled.push(cards[tempCurrentCard], cards[action.card]);\r\n\r\n          if (cards.length === disabled.length) {\r\n            window.alert(\"SuCcEsS\");\r\n          }\r\n        } else {\r\n          currentCard = action.card;\r\n\r\n          if (typeof currentCard !== undefined) {\r\n            tempFlippedCards.push(currentCard);\r\n          }\r\n\r\n          if (typeof tempLastCard !== undefined) {\r\n            tempFlippedCards.push(tempLastCard);\r\n          }\r\n\r\n          if (currentCard !== tempLastCard) {\r\n            tempLives--;\r\n          }\r\n\r\n          // tempLastCard = null;\r\n          // currentCard = null;\r\n\r\n          if (tempLives === 0) {\r\n            tempGameOver = true;\r\n          }\r\n\r\n          // cardsPressed = 0;\r\n          break;\r\n        }\r\n      }\r\n\r\n      break;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n\r\n  return {\r\n    ...state,\r\n    pages: newPages,\r\n    currentPage: pageName,\r\n    test: \"123\",\r\n    cards: newCards,\r\n    cardsPressed: cardsPressed,\r\n    tempCurrentCard: currentCard,\r\n    lastCard: tempLastCard,\r\n    matched: matched,\r\n    htmlSaved: htmlSaved,\r\n    cardsHtml: newCardsHtml,\r\n    intro: tempintro,\r\n    lives: tempLives,\r\n    score: tempScore,\r\n    gameOver: tempGameOver,\r\n    flippedCards: tempFlippedCards\r\n  };\r\n};\r\n\r\nexport default pageReducer;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport reducer from \"./gameRedux/reducer\";\r\nimport { createStore } from \"redux\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nconst store = createStore(\r\n  reducer,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
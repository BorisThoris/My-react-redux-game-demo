{"version":3,"sources":["components/mysteryCard/Card.js","gameRedux/actionTypes.js","components/game/Game.js","App.js","serviceWorker.js","gameRedux/reducer.js","index.js","components/mysteryCard/cardFront.png","components/mysteryCard/cardBack.png","components/mysteryCard/cardBack2.png","components/game/gameBoardBackground.jpg"],"names":["Card","_this$props","this","props","onTest","saveStyle","onClick","id","_this","_this$props2","classToAdd","disabled","intro","cardStyle","display","opacity","transition","transform","tempClass","react_default","a","createElement","clickHandler","className","concat","style","class","height","width","src","cardBack2","alt","cardBack","value","position","top","right","cardFront","Component","connect","state","propss","cardsPressed","dispatch","elementStyle","type","flipCard","card","Game","cards","gameIsOver","includes","saveCards","setIntro","vals","i","cardCount","push","number","count","key","length","Math","floor","random","setTimeout","_this$props3","saveCardsHtml","htmlSaved","cardStyles","activeCard","lastCard","setLives","lives","score","cardArray","styleArray","bool","cardDisabled","console","log","components_mysteryCard_Card","index","gameOverText","zIndex","informationDiv","replayButton","backgroundImage","bgnImage","cardsHtml","tempCurrentCard","cardTwo","gameOver","elementArray","App","game_Game","Boolean","window","location","hostname","match","initialState","pages","currentPage","active","matched","pageReducer","currentCard","arguments","undefined","action","pageName","newPages","Object","objectSpread","tempintro","tempLastCard","tempLives","tempScore","tempGameOver","tempArr","newCards","newCardsHtml","matchBool","backgroundColor","alert","test","store","createStore","reducer","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.003eed6b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport * as actionTypes from \"../../gameRedux/actionTypes\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./Card.css\";\r\nimport cardFront from \"./cardFront.png\";\r\nimport cardBack from \"./cardBack.png\";\r\nimport cardBack2 from \"./cardBack2.png\";\r\nimport { blockStatement } from \"@babel/types\";\r\n\r\nclass Card extends Component {\r\n  componentDidMount() {\r\n    const { onTest, saveStyle } = this.props;\r\n\r\n    onTest();\r\n    saveStyle();\r\n    // console.log(this.props.id);\r\n  }\r\n\r\n  clickHandler() {\r\n    this.props.onClick(this.props.id);\r\n  }\r\n\r\n  render() {\r\n    const { classToAdd, disabled, intro } = this.props;\r\n\r\n    let cardStyle = {\r\n      display: \"inline-block\"\r\n    };\r\n\r\n    if (disabled) {\r\n      cardStyle = {\r\n        display: \"inline-block\",\r\n        opacity: \"0.4\",\r\n        transition: \"1s\",\r\n        transform: \"scale(0.9)\"\r\n      };\r\n    }\r\n\r\n    let tempClass = null;\r\n\r\n    if (classToAdd) {\r\n      tempClass = classToAdd;\r\n    } else if (intro) {\r\n      tempClass = \"active\";\r\n    }\r\n\r\n    return (\r\n      <div\r\n        onClick={() => {\r\n          this.clickHandler();\r\n        }}\r\n        className={`flip-card ${tempClass}`}\r\n        style={cardStyle}\r\n      >\r\n        <div class=\"flip-card-inner\">\r\n          <div class=\"flip-card-front\">\r\n            <img\r\n              height={\"99%\"} //90\r\n              width={\"95%\"} //95\r\n              src={`${cardBack2}`}\r\n              alt={cardBack}\r\n            />\r\n          </div>\r\n          <div class=\"flip-card-back\">\r\n            {/* <h4 style={this.props.style}>{this.props.value}</h4> */}\r\n            <h4 class=\"flip-card-number\">{this.props.value}</h4>\r\n            <img\r\n              style={{ position: \"relative\", top: \"0px\", right: \"0px\" }}\r\n              height={\"100%\"}\r\n              width={\"100%\"}\r\n              src={`${cardFront}`}\r\n              alt={\"lol\"}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    propss: state,\r\n    cardsPressed: state.cardsPressed,\r\n    intro: state.intro\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    saveStyle: elementStyle => ({\r\n      type: actionTypes.SAVE_CARD_STYLE,\r\n      elementStyle\r\n    }),\r\n    onTest: () => dispatch({ type: actionTypes.ON_TEST }),\r\n    flipCard: card => {\r\n      dispatch({ type: actionTypes.ON_CARD_FLIP, card });\r\n    }\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Card);\r\n","export const ON_LEFT = \"ON_LEFT\";\r\nexport const ON_RIGHT = \"ON_RIGHT\";\r\nexport const ON_UP = \"ON_UP\";\r\nexport const ON_DOWN = \"ON_DOWN\";\r\n\r\nexport const SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\";\r\nexport const SET_ACTIVE = \"SET_ACTIVE\";\r\nexport const SET_LAST_SLIDER_CHILD = \"SET_LAST_SLIDER_CHILD\";\r\nexport const REGISTER_CONTROL = \"REGISTER_CONTROL\";\r\nexport const UPDATE_CONTROL = \"UPDATE_CONTROL\";\r\n\r\nexport const ON_TEST = \"ON_TEST\";\r\nexport const SAVE_ALL_CARDS = \"SAVE_ALL_CARDS\";\r\nexport const SAVE_ALL_CARDS_HTML = \"SAVE_ALL_CARDS_HTML\";\r\nexport const ON_CARD_FLIP = \"ON_CARD_FLIP\";\r\nexport const SAVE_CARD_STYLE = \"SAVE_CARD_STYLE\";\r\n\r\nexport const SET_GAME_INTRO = \"ON_GAME_INTRO\";\r\nexport const SET_GAME_SCORE = \"SET_GAME_SCORE\";\r\nexport const SET_GAME_LIVES = \"SET_GAME_LIVES\";\r\n","import React, { Component } from \"react\";\r\nimport * as actionTypes from \"../../gameRedux/actionTypes\";\r\nimport { connect } from \"react-redux\";\r\nimport Card from \"../mysteryCard/Card\";\r\nimport \"./game.css\";\r\nimport bgnImage from \"./gameBoardBackground.jpg\";\r\n// import { url } from \"inspector\";\r\n// import cards from \"../mysteryCard/Card\";\r\n\r\nclass Game extends Component {\r\n  componentDidMount() {\r\n    const { saveCards, setIntro } = this.props;\r\n\r\n    let cardCount = 12;\r\n\r\n    let valuesCount = cardCount / 2;\r\n    let vals = [];\r\n\r\n    for (let i = 0; i < valuesCount; i++) {\r\n      vals.push({ number: i, count: 0 });\r\n    }\r\n\r\n    let cards = [];\r\n    for (let i = 0; i < cardCount; i++) {\r\n      cards.push({ key: i, id: i, value: \"empty\" });\r\n    }\r\n\r\n    for (let i = 0; i < vals.length; i++) {\r\n      while (vals[i].count < 2) {\r\n        let card = cards[Math.floor(Math.random() * cards.length)];\r\n\r\n        if (card.value === \"empty\") {\r\n          card.value = vals[i].number;\r\n          vals[i].count++;\r\n        }\r\n      }\r\n    }\r\n\r\n    setIntro(true);\r\n    setTimeout(() => {\r\n      setIntro(false);\r\n    }, 325);\r\n    saveCards(cards);\r\n  }\r\n\r\n  onClick = id => {\r\n    const { flipCard, cards, disabled, gameIsOver } = this.props;\r\n\r\n    if (!disabled.includes(cards[id]) && !gameIsOver) {\r\n      flipCard(id);\r\n    }\r\n    // console.log((e.target.childNodes[0].style.display = \"inline-block\"));\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      cards,\r\n      saveCardsHtml,\r\n      htmlSaved,\r\n      cardStyles,\r\n      activeCard,\r\n      disabled,\r\n      lastCard,\r\n      setLives,\r\n      lives,\r\n      score,\r\n      gameIsOver\r\n    } = this.props;\r\n\r\n    let cardArray = [];\r\n    let styleArray = [];\r\n\r\n    let bool = false;\r\n    let cardDisabled = false;\r\n\r\n    if (lives === null && cards.length > 0) {\r\n      setLives(cards.length / 2);\r\n    }\r\n\r\n    for (let i = 0; i < cards.length; i++) {\r\n      if (i === activeCard || i === lastCard) {\r\n        console.log(i);\r\n        bool = true;\r\n      }\r\n\r\n      if (disabled.includes(cards[i])) {\r\n        bool = true;\r\n        cardDisabled = true;\r\n      }\r\n\r\n      cardArray.push(\r\n        <Card\r\n          id={cards[i].id}\r\n          key={cards[i].key}\r\n          value={cards[i].value}\r\n          onClick={this.onClick}\r\n          style={cardStyles[i] ? cardStyles[i].style : null}\r\n          classToAdd={!disabled || bool ? \"active\" : null}\r\n          disabled={cardDisabled}\r\n        />\r\n      );\r\n\r\n      bool = false;\r\n      styleArray.push({ index: cards[i].id, style: {} });\r\n\r\n      cardDisabled = false;\r\n    }\r\n\r\n    if (!htmlSaved && styleArray.length > 0) saveCardsHtml(styleArray);\r\n\r\n    let gameOverText = (\r\n      <div\r\n        id=\"gameOver\"\r\n        style={{\r\n          transition: \"0.15s\",\r\n          opacity: `${gameIsOver ? 100 : 0}`,\r\n          zIndex: `${gameIsOver ? 2 : -1000}`\r\n        }}\r\n      >\r\n        <div>Game Over!</div>\r\n        <div>\r\n          You scored\r\n          {` ${score}`} Points!\r\n        </div>\r\n      </div>\r\n    );\r\n\r\n    let informationDiv = (\r\n      <div\r\n        id=\"informationDiv\"\r\n        style={{\r\n          transition: \"0.5s\",\r\n          opacity: `${gameIsOver ? 0 : 100}`\r\n        }}\r\n      >\r\n        <h4 id=\"scoreDiv\">Your score: {score}</h4>\r\n        <h4 id=\"livesDiv\">Your lives: {lives}</h4>\r\n      </div>\r\n    );\r\n\r\n    let replayButton = (\r\n      <div\r\n        id=\"replayButton\"\r\n        style={{\r\n          opacity: `${gameIsOver ? 100 : 0}`,\r\n          zIndex: `${gameIsOver ? 2 : -1000}`\r\n        }}\r\n      >\r\n        <div id=\"arrow\">></div>\r\n      </div>\r\n    );\r\n\r\n    return (\r\n      <div id=\"appDiv\">\r\n        {informationDiv}\r\n        {gameOverText}\r\n        {replayButton}\r\n\r\n        <div id=\"gameBoard\" style={{ backgroundImage: `url(${bgnImage})` }}>\r\n          <div id=\"cardsDiv\">{cardArray ? cardArray : null}</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    cards: state.cards,\r\n    htmlSaved: state.htmlSaved,\r\n    cardStyles: state.cardsHtml,\r\n    activeCard: state.tempCurrentCard,\r\n    cardTwo: state.cardTwo,\r\n    disabled: state.disabled,\r\n    lastCard: state.lastCard,\r\n    lives: state.lives,\r\n    score: state.score,\r\n    gameIsOver: state.gameOver\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    setIntro: bool => dispatch({ type: actionTypes.SET_GAME_INTRO, bool }),\r\n    onTest: () => dispatch({ type: actionTypes.ON_TEST }),\r\n    saveCards: cardArray => {\r\n      dispatch({ type: actionTypes.SAVE_ALL_CARDS, cardArray });\r\n    },\r\n    saveCardsHtml: elementArray => {\r\n      dispatch({ type: actionTypes.SAVE_ALL_CARDS_HTML, elementArray });\r\n    },\r\n    flipCard: card => {\r\n      dispatch({ type: actionTypes.ON_CARD_FLIP, card });\r\n    },\r\n    setLives: lives => {\r\n      dispatch({ type: actionTypes.SET_GAME_LIVES, lives });\r\n    }\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Game);\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Game from './components/game/Game';\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Game />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import * as actionTypes from \"./actionTypes\";\r\n\r\nconst initialState = {\r\n  cardsPressed: 0,\r\n  score: 0,\r\n  lives: null,\r\n\r\n  pages: {},\r\n  cardsHtml: [],\r\n  cards: [],\r\n  disabled: [],\r\n\r\n  currentPage: null,\r\n  active: null,\r\n  tempCurrentCard: null,\r\n  lastCard: null,\r\n\r\n  htmlSaved: false,\r\n  matched: false,\r\n  intro: false,\r\n  gameOver: false\r\n};\r\n\r\nconst pageReducer = (state = initialState, action) => {\r\n  const pageName = action.pageName ? action.pageName : state.currentPage;\r\n  const newPages = { ...state.pages };\r\n\r\n  let cardsPressed = state.cardsPressed;\r\n  let currentCard;\r\n  //let tempCurrentCard = state.cardTwo;\r\n\r\n  let matched = state.matched;\r\n  let htmlSaved = state.htmlSaved;\r\n  let tempintro = state.intro;\r\n  let tempLastCard = state.lastCard;\r\n  let tempLives = state.lives;\r\n  let tempScore = state.score;\r\n  let tempGameOver = state.gameOver;\r\n\r\n  let tempArr = [];\r\n  for (let i = 0; i < state.cards.length; i++) {\r\n    tempArr.push(state.cards[i]);\r\n  }\r\n\r\n  let newCards = tempArr;\r\n  let newCardsHtml = state.cardsHtml;\r\n\r\n  switch (action.type) {\r\n    /* important */\r\n\r\n    case actionTypes.SET_GAME_INTRO:\r\n      // let bool = action.bool;\r\n      tempintro = action.bool;\r\n\r\n      break;\r\n\r\n    case actionTypes.SET_GAME_LIVES:\r\n      // let bool = action.bool;\r\n      tempLives = action.lives;\r\n\r\n      break;\r\n\r\n    case actionTypes.SAVE_CARD_STYLE:\r\n      break;\r\n\r\n    case actionTypes.SAVE_ALL_CARDS:\r\n      newCards = action.cardArray;\r\n      break;\r\n\r\n    case actionTypes.SAVE_ALL_CARDS_HTML:\r\n      newCardsHtml = action.elementArray;\r\n      htmlSaved = true;\r\n      break;\r\n\r\n    case actionTypes.ON_CARD_FLIP:\r\n      let tempCurrentCard = state.tempCurrentCard;\r\n      let cards = state.cards;\r\n      let disabled = state.disabled;\r\n\r\n      const matchBool =\r\n        cards[action.card] &&\r\n        cards[tempCurrentCard] &&\r\n        cards[action.card].value === cards[tempCurrentCard].value &&\r\n        cards[action.card] !== cards[tempCurrentCard];\r\n\r\n      if (newCardsHtml[action.card]) {\r\n        newCardsHtml[action.card].style = { backgroundColor: \"red\" };\r\n      }\r\n\r\n      matched = false;\r\n\r\n      if (cardsPressed < 2) {\r\n        cardsPressed++;\r\n        currentCard = action.card;\r\n        tempLastCard = state.tempCurrentCard;\r\n\r\n        if (matchBool) {\r\n          matched = true;\r\n          tempScore += 50;\r\n          tempLives++;\r\n\r\n          disabled.push(cards[tempCurrentCard], cards[action.card]);\r\n\r\n          currentCard = null;\r\n\r\n          if (cards.length === disabled.length) {\r\n            window.alert(\"SuCcEsS\");\r\n          }\r\n          // break;\r\n        }\r\n\r\n        if (matched === true) {\r\n          newCardsHtml[action.card].style = { opacity: \"0.3\" };\r\n\r\n          if (newCardsHtml[state.tempCurrentCard]) {\r\n            newCardsHtml[state.tempCurrentCard].style = { opacity: \"0.3\" };\r\n          }\r\n\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (cardsPressed === 2) {\r\n        if (matchBool) {\r\n          matched = true;\r\n          tempScore += 50;\r\n          tempLives++;\r\n\r\n          disabled.push(cards[tempCurrentCard], cards[action.card]);\r\n\r\n          currentCard = null;\r\n\r\n          if (cards.length === disabled.length) {\r\n            window.alert(\"SuCcEsS\");\r\n          }\r\n          // break;\r\n        } else {\r\n          cardsPressed = 0;\r\n          currentCard = action.card;\r\n          console.log(currentCard);\r\n          console.log(tempLastCard);\r\n          if (currentCard !== tempLastCard) {\r\n            tempLives--;\r\n          }\r\n          tempLastCard = null;\r\n\r\n          if (tempLives === 0) {\r\n            tempGameOver = true;\r\n            // window.alert(\"Game Over, Sorry Bro :/\");\r\n          }\r\n          break;\r\n        }\r\n      }\r\n\r\n      break;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n\r\n  return {\r\n    ...state,\r\n    pages: newPages,\r\n    currentPage: pageName,\r\n    test: \"123\",\r\n    cards: newCards,\r\n    cardsPressed: cardsPressed,\r\n    tempCurrentCard: currentCard,\r\n    lastCard: tempLastCard,\r\n    matched: matched,\r\n    htmlSaved: htmlSaved,\r\n    cardsHtml: newCardsHtml,\r\n    intro: tempintro,\r\n    lives: tempLives,\r\n    score: tempScore,\r\n    gameOver: tempGameOver\r\n  };\r\n};\r\n\r\nexport default pageReducer;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport reducer from \"./gameRedux/reducer\";\r\nimport { createStore } from \"redux\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nconst store = createStore(\r\n  reducer,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/cardFront.34e9638c.png\";","module.exports = __webpack_public_path__ + \"static/media/cardBack.e237d232.png\";","module.exports = __webpack_public_path__ + \"static/media/cardBack2.0c66ed35.png\";","module.exports = __webpack_public_path__ + \"static/media/gameBoardBackground.2873992a.jpg\";"],"sourceRoot":""}